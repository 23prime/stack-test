reverse [0, 1, 2]

= let xs = [1, 2]
  in  reverse xs ++ [0]

= let xs = [1, 2]
  in  let ys = [2]
      in  (reverse ys ++ [1]) ++ [0]

= let xs = [1, 2]
  in  let ys = [2]
      in  let zs = []
          in  ((reverse zs ++ [2]) ++ [1]) ++ [0]

= let xs = [1, 2]
  in  let ys = [2]
      in  let zs = []
          in  ((reverse [] ++ [2]) ++ [1]) ++ [0]

= let xs = [1, 2]
  in  let ys = [2]
      in  let zs = []
          in  (([] ++ [2]) ++ [1]) ++ [0]

= let xs = [1, 2]
  in  let ys = [2]
      in  let zs = []
          in  ((reverse [] ++ [2]) ++ [1]) ++ [0]





reverse []       = []
reverse (x : xs) = reverse xs ++ [x]
 
reverse [0, 1, 2]
= let (x : xs) = [0, 1, 2]
  in  reverse xs ++ [x]
= let (x : xs) = [0, 1, 2]
  in  let (y : ys) = xs
      in  (reverse ys ++ [y]) ++ [x]
= let (x : xs) = [0, 1, 2]
  in  let (y : ys) = xs
      in  let (z : zs) = ys
          in  ((reverse zs ++ [z]) ++ [y]) ++ [x]
= let (y : ys) = [1, 2]
  in  let (z : zs) = ys
      in  ((reverse zs ++ [z]) ++ [y]) ++ [0]
= let (z : zs) = [2]
  in  reverse zs ++ [z] ++ [1] ++ [0]
= ((reverse [] ++ [2]) ++ [1]) ++ [0]
= (([] ++ [2]) ++ [1]) ++ [0]
= ([2] ++ [1]) ++ [0]
= [2, 1] ++ [0]
= [2, 1, 0]



reverse xs = revcat xs []
  where
    revcat [] ys       = ys
    revcat (x : xs) ys = revcat xs (x : ys)

reverse [0, 1, 2]
= revcat [0, 1, 2] []
= let (x : xs) = [0, 1, 2]
      ys       = []
  in  revcat xs (x : ys)
= let (x : xs) = [0, 1, 2]
      ys       = []
  in  let (a : as) = xs
          bs       = x : ys
      in  revcat as (a : bs)
= let (x : xs) = [0, 1, 2]
      ys       = []
  in  let (a : as) = xs
          bs       = x : ys
      in  let (c : cs) = as
              ds       = a : bs
          in  revcat cs (c : ds)
= let (a : as) = [1, 2]
      bs       = 0 : []
  in  let (c : cs) = as
          ds       = a : bs
      in  revcat cs (c : ds)
= let (c : cs) = [2]
      ds       = 1 : (0 : [])
  in  revcat cs (c : ds)
= revcat [] (2 : (1 : (0 : [])))
= 2 : (1 : (0 : []))
= 2 : (1 : [0])
= 2 : [1, 0]
= [2, 1, 0]



